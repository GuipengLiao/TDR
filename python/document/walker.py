from hotpot.hotpot.hp_config import *
from hotpot.hotdata.syntactic_node import *
import sys
import os

class Walker:
	def __init__(self, document):
		self.document = document
		self.enum_list = {}

	def print_file_prefix(self):
		self.print_line(0, '/**')
		self.print_line(0, ' * Autogenerated by HotData (' + HOTPOT_VERSION + ')')
		self.print_line(0, ' *')
		self.print_line(0, ' * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING')
		self.print_line(0, ' *  @generated')
		self.print_line(0, ' */')
		self.print_line(0, '')

	def print_line(self, n, str):
		for i in range(0,n):
			self.fout.write('    ')
		self.fout.write(str)
		self.fout.write('\n')

	def walk_const(self, const):
		self.on_const(const)
		pass

	def walk_typedef(self, typedef):
		self.on_typedef(typedef)
		pass

	def walk_enum(self, enum):
		self.on_enum_begin(enum)
		for enum_field in enum['enum_def_list']:
			self.on_enum_field(enum_field)
		self.on_enum_end(enum)
		self.enum_list[enum['name']] = True

	def walk_struct(self, struct):
		self.on_struct_begin(struct)
		for struct_field in struct['field_list']['field_list']:
			self.on_struct_field(struct_field)
		self.on_struct_end(struct)

	def walk_union(self, union):
		self.on_union_begin(union)
		for union_field in union['field_list']['field_list']:
			self.on_union_field(union_field)
		self.on_union_end(union)

	def walk_import(self, de_import):
		self.on_import(de_import)
		pass

	def walk_unix_comment(self, de_unix_comment):
		self.on_unix_comment(de_unix_comment)
		pass

	def walk(self):
		self.on_document_begin(self.document)
		for definition in self.document['definition_list']:
			if(definition['type'] == E_DT_CONST):
				self.walk_const(definition['definition']['de_const'])
			elif(definition['type'] == E_DT_TYPEDEF):
				self.walk_typedef(definition['definition']['de_typedef'])
			elif(definition['type'] == E_DT_ENUM):
				self.walk_enum(definition['definition']['de_enum'])
			elif(definition['type'] == E_DT_STRUCT):
				self.walk_struct(definition['definition']['de_struct'])
			elif(definition['type'] == E_DT_UNION):
				self.walk_union(definition['definition']['de_union'])
			elif(definition['type'] == E_DT_IMPORT):
				self.walk_import(definition['definition']['de_import'])
			elif(definition['type'] == E_DT_UNIX_COMMENT):
				self.walk_unix_comment(definition['definition']['de_unix_comment'])
		self.on_document_end(self.document)
		return True
