loadfile(lua_dir .. "lib/syntactic_node.lua")();
function print_val(val)
	if val.type == E_SNVT_IDENTIFIER then
		io.write(val.val.identifier)
	elseif val.type == E_SNVT_CHAR then
		io.write("'")
		if(val.val.c == '\n')then
			io.write('\\n')
		else
			io.write(val.val.c)
		end
		io.write("'")
	elseif val.type == E_SNVT_DOUBLE then
		io.write(val.val.d)
	elseif val.type == E_SNVT_BOOL then
		io.write(val.val.b)
	elseif val.type == E_SNVT_STRING then
		--需要处理字符串中的转义
		io.write('"')
		io.write(val.val.str)
		io.write('"')
	elseif val.type == E_SNVT_INT64 then
		io.write(val.val.i64)
	elseif val.type == E_SNVT_UINT64 then
		io.write(val.val.ui64)
	elseif val.type == E_SNVT_HEX_INT64 then
		io.write(val.val.hex_i64)
	elseif val.type == E_SNVT_HEX_UINT64 then
		io.write(val.val.hex_ui64)
	end
end

function on_const(const)
	io.write('#define\t')
	io.write(const.identifier)
	io.write(' ')
	print_val(const.val)
	io.write('\n')
end

function print_type(type, args)
	if(type.type == E_SNT_SIMPLE)then
		if(type.st == E_ST_CHAR)then
			io.write('hpchar')
		elseif(type.st == E_ST_DOUBLE)then
			io.write('hpdouble')
		elseif(type.st == E_ST_BOOL)then
			io.write('hpbool')
		elseif(type.st == E_ST_INT8)then
			io.write('hpint8')
		elseif(type.st == E_ST_INT16)then
			io.write('hpint16')
		elseif(type.st == E_ST_INT32)then
			io.write('hpint32')
		elseif(type.st == E_ST_INT64)then
			io.write('hpint64')
		elseif(type.st == E_ST_UINT8)then
			io.write('hpuint8')
		elseif(type.st == E_ST_UINT16)then
			io.write('hpuint16')
		elseif(type.st == E_ST_UINT32)then
			io.write('hpuint32')
		elseif(type.st == E_ST_UINT64)then
			io.write('hpuint64')
		end
	elseif(type.type == E_SNT_CONTAINER)then
		if(type.ct == E_CT_VECTOR)then
			io.write(args.arg_list[0].id)
		elseif(type.ct == E_CT_STRING)then
			io.write('hpchar')
		end
	elseif(type.type == E_SNT_REFER)then
		io.write(type.ot);
	end
end

function on_typedef(typedef)
	io.write('typedef')
	io.write(' ')
	print_type(typedef.type, nil)
	io.write(' ')
	io.write(typedef.name)
	io.write(';\n')
end

function on_enum(enum)
	io.write('enum ' .. enum.name)
	io.write('\n')
	io.write('{\n')
	for key, value in pairs(enum.enum_def_list) do
		io.write('\t' .. value.identifier .. ' = ')
		print_val(value.val)
		io.write(',\n')
	end
	io.write('}\n')
end

function on_struct(struct)
	io.write('struct ' .. struct.name)
	io.write('\n')
	io.write('{\n')
	for key, value in pairs(struct.field_list.field_list) do
		io.write('\t')
		io.write(struct.args.arg_list[0])
		io.write(value.identifier .. ';\n')
	end
	io.write('}\n')
end

for key, value in pairs(hd['definition_list']) do
	if(value.type == E_DT_CONST)then
		on_const(value.definition.de_const)
	elseif(value.type == E_DT_TYPEDEF)then
		on_typedef(value.definition.de_typedef)
	elseif(value.type == E_DT_ENUM)then
		on_enum(value.definition.de_enum)
	elseif(value.type == E_DT_STRUCT)then
		on_struct(value.definition.de_struct)
	end
end

