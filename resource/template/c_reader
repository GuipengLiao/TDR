<%
	$DefinitionList
	[
		$*
		{
			$import
			{
%>
	#include "<%$file%>.h"
<%
			}
			$comment
			{
%>
//<% $text %>
<%
			}

			$struct
			{
%>
void write_<%$name%>(HPAbstractWriter *self, const <%$name%>* data<% $Parameters[$*{' ' ',' $Type{$SimpleType{$type} $ObjectType{$type} $ContainerType{$type}} ' ' $name}] %>)
{
<%				$list
				[
					$*
					{
						$Type{$ContainerType{$vector
						{%>
	for(i = 0; i < <%$Arguments[$1]%>; ++i)
	{
		if( i == <%$Arguments[$2]%> )
		{
			break;
		}
<%						}}}%>	
	<%$condition{$expression{'if ' $negation{'(!'} '(' $op0 ' ' $operator ' ' $op1 ')' $negation{')'} ' ' }}%><%$Type{$ContainerType{$vector{'\t'}}}%>write_<%$Type
	{
		$SimpleType{$type}
		$ObjectType{$type}
		$ContainerType{$vector{$Arguments[$0{$name}]} $string{'string'}}
	}
%>(<% $name $Type{$ObjectType{$Arguments[$*{',' $name}]} $ContainerType{$vector{$Arguments[$2+{',' $name}]} $string{', ' $Arguments[$0]}}}%>);<%
						$Type{$ContainerType{$vector
						{%>
	}
<%						}}}
					}
				]
%>
}
<%
			}

	$union
			{
%>
void write_<%$name%>(HPAbstractWriter *self, const <%$name%>* data<% $Parameters[$*{' ' ',' $Type{$SimpleType{$type} $ObjectType{$type} $ContainerType{$type}} ' ' $name}] %>)
{
	switch(<% $TypeAnnotations[$*{$switch}] %>)
	{
<%				$list
				[
					$*
					{
%>
		case <% $condition{$expression{$op1}}%>:
			write_<%$Type{$SimpleType{$type} $ObjectType{$type} $ContainerType{$vector{$Arguments[$0{$name}]}$string{'string'}}}%>(<% $name $Type{$ObjectType{$Arguments[$*{',' $name}]}$ContainerType{$string{', ' $Arguments[$0]}}}%>);
			break;<%
					}
				]
%>
	}
}
<%
			}

		}
	]
%>
