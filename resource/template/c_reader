#include "hotpot/hp_platform.h"
#include "hotprotocol/hp_abstract_reader.h"

#include "<%$package_name%>_types.h"
<%
	$DefinitionList
	[
		$*
		{
			$import
			{
%>
#include "<%$file%>.h"
<%
			}
			$comment
			{
%>
//<% $text %>
<%
			}

			$struct
			{
%>
void read_<%$name%>(HPAbstractReader *self, <%$name%>* data<% $Parameters[$*{' ' ',' 'hp' $Type{$SimpleType{$type} $ObjectType{$type} $ContainerType{$type}} ' ' $name}] %>)
{ 
<%				$list
				[
					$*
					{
						$Type{$ContainerType{$vector
						{%>
	{	
		hpuint32 i;
		for(i = 0; i < <%$Arguments[$1{$Identifier{$id}}]%>; ++i)
		{
			if( i == data-><%$Arguments[$2{$Identifier{$id}}]%> )
			{
				break;
			}
<%						}}}%>	
		<%$condition{$expression{'if ' $negation{'(!'} '(' $op0 ' ' $operator ' ' $op1 ')' $negation{')'} ' ' }} $Type{$ContainerType{$vector{'\t'}}}%>read_<%$Type
	{
		$SimpleType{$type}
		$ObjectType{$type}
		$ContainerType{$vector{$Arguments[$0{$Identifier{$id}$SimpleType{$type}}]} $string{'string'}}
	}
%>(self, <% $Type{$ContainerType{'data->'}$ObjectType{'&data->'}$SimpleType{'&data->'} $name} $Type{$ObjectType{$Arguments[$*{', data->' $Identifier{$id}}]} $ContainerType{$vector{$Arguments[$3+{', ' $Identifier{'data->'$id}}]} $string{', ' $Arguments[$0{$Identifier{$id}}]}}}%>);<%
						$Type{$ContainerType{$vector
						{%>
		}
	}
<%						}}}
					}
				]
%>
}
<%
			}

	$union
			{
%>
void read_<%$name%>(HPAbstractReader *self, <%$name%>* data<% $Parameters[$*{' ' ',' 'hp' $Type{$SimpleType{$type} $ObjectType{$type} $ContainerType{$type}} ' ' $name}] %>)
{
	switch(<% $TypeAnnotations[$*{$switch}] %>)
	{
<%				$list
				[
					$*
					{
%>
		case <% $condition{$expression{$op1}}%>:
			read_<%$Type
	{
		$SimpleType{$type}
		$ObjectType{$type}
		$ContainerType{$vector{$Arguments[$0{$Identifier{$id}$SimpleType{$type}}]} $string{'string'}}
	}
%>(self, <% $Type{$ContainerType{'data->'}$ObjectType{'&data->'}$SimpleType{'&data->'} $name} $Type{$ObjectType{$Arguments[$*{', data->' $Identifier{$id}}]} $ContainerType{$vector{$Arguments[$3+{', ' $Identifier{'data->'$id}}]} $string{', ' $Arguments[$0{$Identifier{$id}}]}}}%>);
			break;<%
					}
				]
%>
	}
}
<%
			}

		}
	]
%>
