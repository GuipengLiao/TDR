function _print_tab(n)
	for i = 0, n - 1 do
		io.write('\t')
	end
end

function _is_arr(object)
	if(type(object) ~= "table") then
		return false
	end
	last = 0
	for key, value in pairs(object) do  
		if(key == last + 1) then
			last = key
		else
			return false
		end		
	end
	return true
end

function _is_object(object)
	return type(object) == "table"
end


function _json_encode(object, deep)
	if(_is_arr(object)) then
		p = pairs(object)
		io.write("[");
		io.write('\n')
		for key, value in pairs(object) do
			_print_tab(deep + 1)
			_json_encode(value, deep + 1)
			if(key ~= table.maxn(object)) then
				io.write(',')
				io.write('\n')
			end
		end
		io.write("]");
	elseif(_is_object(object)) then
		first = true
		io.write("{");
		io.write('\n')
		for key, value in pairs(object) do  
			if not first then
				io.write(',')
				io.write('\n')
			end
			_print_tab(deep + 1)
			io.write(key .. ':')
			_json_encode(value, deep + 1)
			first = false
		end
		io.write('\n')
		_print_tab(deep)
		io.write("}");
		io.write('\n')
	else
		io.write(object)
	end	
end

function json_encode(object)
	_json_encode(object, 0)
end

json = require("json")
print (json.encode(hp))

json_encode(hp)
