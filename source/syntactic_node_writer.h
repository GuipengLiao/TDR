/**
 * Autogenerated by HotData (0.0.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef _H_hotdata_syntactic_node_hd_WRITER_HEADER
#define _H_hotdata_syntactic_node_hd_WRITER_HEADER
#include "platform/tlibc_platform.h"
#include "hp_error_code.h"
#include "protocol/tlibc_abstract_writer.h"
#include "syntactic_node.h"

TLIBC_ERROR_CODE write_ST_UNIX_COMMENT(TLIBC_ABSTRACT_WRITER *self, const ST_UNIX_COMMENT *data);
TLIBC_ERROR_CODE write_SN_VALUE_TYPE_name(TLIBC_ABSTRACT_WRITER *self, SN_VALUE_TYPE data);
TLIBC_ERROR_CODE write_SN_VALUE_TYPE_number(TLIBC_ABSTRACT_WRITER *self, SN_VALUE_TYPE data);
TLIBC_ERROR_CODE write_SN_VALUE_TYPE(TLIBC_ABSTRACT_WRITER *self, SN_VALUE_TYPE data);
TLIBC_ERROR_CODE write_UN_VALUE(TLIBC_ABSTRACT_WRITER *self, const UN_VALUE *data , SN_VALUE_TYPE s);
TLIBC_ERROR_CODE write_ST_VALUE(TLIBC_ABSTRACT_WRITER *self, const ST_VALUE *data);
TLIBC_ERROR_CODE write_SN_SIMPLE_TYPE_name(TLIBC_ABSTRACT_WRITER *self, SN_SIMPLE_TYPE data);
TLIBC_ERROR_CODE write_SN_SIMPLE_TYPE_number(TLIBC_ABSTRACT_WRITER *self, SN_SIMPLE_TYPE data);
TLIBC_ERROR_CODE write_SN_SIMPLE_TYPE(TLIBC_ABSTRACT_WRITER *self, SN_SIMPLE_TYPE data);
TLIBC_ERROR_CODE write_SN_CONTAINER_TYPE_name(TLIBC_ABSTRACT_WRITER *self, SN_CONTAINER_TYPE data);
TLIBC_ERROR_CODE write_SN_CONTAINER_TYPE_number(TLIBC_ABSTRACT_WRITER *self, SN_CONTAINER_TYPE data);
TLIBC_ERROR_CODE write_SN_CONTAINER_TYPE(TLIBC_ABSTRACT_WRITER *self, SN_CONTAINER_TYPE data);
TLIBC_ERROR_CODE write_SN_TYPE_name(TLIBC_ABSTRACT_WRITER *self, SN_TYPE data);
TLIBC_ERROR_CODE write_SN_TYPE_number(TLIBC_ABSTRACT_WRITER *self, SN_TYPE data);
TLIBC_ERROR_CODE write_SN_TYPE(TLIBC_ABSTRACT_WRITER *self, SN_TYPE data);
TLIBC_ERROR_CODE write_ST_TYPE(TLIBC_ABSTRACT_WRITER *self, const ST_TYPE *data);
TLIBC_ERROR_CODE write_ST_Parameter(TLIBC_ABSTRACT_WRITER *self, const ST_Parameter *data);
TLIBC_ERROR_CODE write_ST_Parameters(TLIBC_ABSTRACT_WRITER *self, const ST_Parameters *data);
TLIBC_ERROR_CODE write_ST_ARGUMENTS(TLIBC_ABSTRACT_WRITER *self, const ST_ARGUMENTS *data);
TLIBC_ERROR_CODE write_ST_EXPRESSION_OPER_name(TLIBC_ABSTRACT_WRITER *self, ST_EXPRESSION_OPER data);
TLIBC_ERROR_CODE write_ST_EXPRESSION_OPER_number(TLIBC_ABSTRACT_WRITER *self, ST_EXPRESSION_OPER data);
TLIBC_ERROR_CODE write_ST_EXPRESSION_OPER(TLIBC_ABSTRACT_WRITER *self, ST_EXPRESSION_OPER data);
TLIBC_ERROR_CODE write_ST_Expression(TLIBC_ABSTRACT_WRITER *self, const ST_Expression *data);
TLIBC_ERROR_CODE write_ST_CONDITION(TLIBC_ABSTRACT_WRITER *self, const ST_CONDITION *data);
TLIBC_ERROR_CODE write_ST_FIELD(TLIBC_ABSTRACT_WRITER *self, const ST_FIELD *data);
TLIBC_ERROR_CODE write_TA_TYPE_name(TLIBC_ABSTRACT_WRITER *self, TA_TYPE data);
TLIBC_ERROR_CODE write_TA_TYPE_number(TLIBC_ABSTRACT_WRITER *self, TA_TYPE data);
TLIBC_ERROR_CODE write_TA_TYPE(TLIBC_ABSTRACT_WRITER *self, TA_TYPE data);
TLIBC_ERROR_CODE write_ST_TypeAnnotation(TLIBC_ABSTRACT_WRITER *self, const ST_TypeAnnotation *data);
TLIBC_ERROR_CODE write_ST_TypeAnnotations(TLIBC_ABSTRACT_WRITER *self, const ST_TypeAnnotations *data);
TLIBC_ERROR_CODE write_ST_Import(TLIBC_ABSTRACT_WRITER *self, const ST_Import *data);
TLIBC_ERROR_CODE write_ST_Const(TLIBC_ABSTRACT_WRITER *self, const ST_Const *data);
TLIBC_ERROR_CODE write_ST_ENUM_DEF(TLIBC_ABSTRACT_WRITER *self, const ST_ENUM_DEF *data);
TLIBC_ERROR_CODE write_ST_ENUM(TLIBC_ABSTRACT_WRITER *self, const ST_ENUM *data);
TLIBC_ERROR_CODE write_ST_FIELD_LIST(TLIBC_ABSTRACT_WRITER *self, const ST_FIELD_LIST *data);
TLIBC_ERROR_CODE write_ST_STRUCT(TLIBC_ABSTRACT_WRITER *self, const ST_STRUCT *data);
TLIBC_ERROR_CODE write_ST_UNION(TLIBC_ABSTRACT_WRITER *self, const ST_UNION *data);
TLIBC_ERROR_CODE write_ST_TYPEDEF(TLIBC_ABSTRACT_WRITER *self, const ST_TYPEDEF *data);
TLIBC_ERROR_CODE write_EN_DEFINITION_TYPE_name(TLIBC_ABSTRACT_WRITER *self, EN_DEFINITION_TYPE data);
TLIBC_ERROR_CODE write_EN_DEFINITION_TYPE_number(TLIBC_ABSTRACT_WRITER *self, EN_DEFINITION_TYPE data);
TLIBC_ERROR_CODE write_EN_DEFINITION_TYPE(TLIBC_ABSTRACT_WRITER *self, EN_DEFINITION_TYPE data);
TLIBC_ERROR_CODE write_UN_DEFINITION(TLIBC_ABSTRACT_WRITER *self, const UN_DEFINITION *data , EN_DEFINITION_TYPE s);
TLIBC_ERROR_CODE write_ST_DEFINITION(TLIBC_ABSTRACT_WRITER *self, const ST_DEFINITION *data);
#endif//_H_hotdata_syntactic_node_hd_WRITER_HEADER
